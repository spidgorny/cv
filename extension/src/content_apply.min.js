(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports={
	"basics": {
		"anrede": ["Herr", "M", "Male", "male"],
		"title": ["Sir", "Dipl.-Informatiker (FH)", "CS Major"],
		"firstName": "Slawa",
		"lastName": "Jobsucher",
		"name": "Slawa Jobsucher",
		"label": "Web Developer",
		"summary": "I’m a full stack web developer who loves working with open source technology. I work best at planning the architecture of web  applications and their development life cycles. I also love to get the community involved and have had much experience with building and organizing large open source groups.",
		"email": "slapidya@gmail.com",
		"website": "https://github.com/spidgorny",
		"phone": "+49",
		"phone2": "+49",
		"fax": "fax?",
		"username": "slawa.jobsucher",
		"password": "5nQ4AN9sgdP",
		"preferredContact": ["E-mail", "e-mail", "E-Mail"],
		"location": {
			"street": "Upon request",
			"zip": "60435",
			"city": "Frankfurt am Main",
			"countryCode": "DE",
			"country": "Germany"
		},
		"profiles": [
			{
				"username": "ajaxdavis",
				"url": "https://twitter.com/ajaxdavis",
				"network": "twitter"
			},
			{
				"url": "https://github.com/thomasdavis",
				"username": "thomasdavis",
				"network": "github"
			}
		]
	},
	"coverLetter": "Hi, I'm a rock-star developer. Hire me.",
	"education": [
		{
			"type": "school",
			"endDate": "2009-12-12",
			"startDate": "2008-02-12",
			"area": "Software Engineering (incomplete)",
			"studyType": "Gymnasium",
			"institution": "The University of Queensland",
			"degree": "Abitur"
		},
		{
			"type": "apprenticeship1",
			"endDate": "2009-12-12",
			"startDate": "2008-02-12",
			"area": "Software Engineering (incomplete)",
			"studyType": "Bachelors",
			"institution": "The University of Queensland",
			"location": "Berlin",
			"comment": "It was nice"
		},
		{
			"type": "apprenticeship2",
			"endDate": "2009-12-12",
			"startDate": "2008-02-12",
			"area": "Software Engineering (incomplete)",
			"studyType": "Bachelors",
			"institution": "The University of Queensland",
			"location": "Frankfurt",
			"comment": "It was not nice"
		},
		{
			"type": "education1",
			"endDate": "2009-12-12",
			"startDate": "2008-02-12",
			"area": "Software Engineering (incomplete)",
			"studyType": "Bachelors",
			"institution": "The University of Queensland"
		},
		{
			"type": "education2",
			"endDate": "2009-12-12",
			"startDate": "2008-02-12",
			"area": "Software Engineering (incomplete)",
			"studyType": "Bachelors",
			"institution": "The University of Queensland"
		}
	],
	"references": [
		{
			"reference": "Thomas was hired as a lead developer and, upon the leaving of our co-founder took over as CTO of Earbits. Thomas is, hands down, one of those A Players you hear of companies dying to hire. He is incredibly smart, not just at code but about everything from classical music to Chinese language and culture. Thomas is great to work with and, as a well established contributor to open source projects and several successful ventures, commands the respect of engineers at all levels. I would suggest doing anything you can to have him on your team.",
			"name": "Joey Flores, Co-founder and CEO of Earbits, Inc."
		},
		{
			"reference": "I've had the great pleasure of working with Thomas for the past three years at Earbits, and on a few side projects. Two years ago our CTO left on a moment's notice, Thomas saved our company by quickly stepping up to fill this role. He has been with our company through thick and thin and made serious personal sacrifices in order to help the company during tough times. He is a phenomenal hacker and a true team player. Highly recommended!",
			"name": "Yotam Rosenbaum, SVP of Operations, Earbits, Inc."
		},
		{
			"reference": "Thomas is an extremely talented engineer with a very broad range of skills and experience. From being a thought leader in the front-end community via backbonetutorials.com and cdnjs.com, to designing and implementing the API for cdnjs.com, working with Thomas has been fantastic learning experience. Thomas is truly a full stack develop, and his work output is incredible. If there is any opportunity to work with Thomas, I take it. He is the definition of an A player.",
			"name": "Ryan Kirkman, Senior Software Engineer at Nerdwallet"
		},
		{
			"reference": "On Thomas Davis ... Hire this guy. Do not be fooled. Incredibly capable and fast. Plays well with others. Unbelievable at front-end work end programming but that is just the start. Visionary. Hire him before I do.",
			"name": "Greg Davis"
		}
	],
	"skills": [
		{
			"keywords": [
				"HTML",
				"CSS",
				"Javascript",
				"React",
				"Redux"
			],
			"name": "Frontend"
		},
		{
			"keywords": [
				"Node",
				"Ruby",
				"Postgres",
				"DynamoDb"
			],
			"name": "Backend"
		}
	],
	"work": [
		{
			"highlights": [
				"We are hiring! -> https://listium.com/jobs",
				"Many difficult technical problems"
			],
			"summary": "Create private lists, share lists with friends, or publish your lists and share them with the world. All in one place.",
			"website": "https://listium.com",
			"company": "Listium",
			"position": "Developer",
			"startDate": "2016-01-01"
		},
		{
			"highlights": [
				"Millions of sites use the CDN in production",
				"Larger market share than Yahoo's and Microsoft's content distribution network",
				"We serve hundreds of billions request a month",
				"Contains over 2000 popular Javascript libraries",
				"Millions of developers visit the site per year"
			],
			"summary": "Following Google’s CDN for jQuery, we decided to start a CDN for the less popular Javascript frameworks. The CDN is community moderated and open source on GitHub. We secured a partnership with Cloudflare who now supports the infrastructure.",
			"website": "http://www.cdnjs.com",
			"company": "Cdnjs",
			"position": "Co-Founder",
			"startDate": "2011-01-08"
		},
		{
			"highlights": [
				"Developed new tools for contacting congress",
				"Brainstormed campaign ideas to raise maximum awareness about issues",
				"Lots of social networking integration"
			],
			"summary": "Hired to take EFF's campaigning to the next level by building an action centre in Ruby on Rails. The action centre is built around some large open source tools that lower the barrier to entry when contacting congress.",
			"website": "http://www.eff.org",
			"company": "Electronic Frontier Foundation",
			"position": "Developer",
			"startDate": "2014-04-01"
		},
		{
			"highlights": [
				"Managed a small team of developers and designers",
				"Built the entire frontend application with Backbone.js",
				"Transferred all of the infrastructure from Heroku to AWS"
			],
			"summary": "Started off as a front end developer but took on the role of CTO in early 2013. The application frontend is built with Javascript and organized as a single page application that talks to a collection of Rails web servers which are connected to MongoDB.",
			"website": "http://www.earbits.com",
			"company": "Earbits",
			"position": "CTO",
			"endDate": "2014-01-09",
			"startDate": "2013-03-08"
		},
		{
			"highlights": [
				"Over 1500 stars on Github",
				"Community developed themes",
				"50,000 views on the hosted service"
			],
			"summary": "JSON Resume is a community driven open source initiative to create a JSON based standard for resumes. There is no reason why there can't be a common standard for writing a resume that can be extended with an ecosystem of open source tools.",
			"website": "http://jsonresume.org",
			"company": "JSON Resume",
			"position": "Founder",
			"startDate": "2014-04-01"
		},
		{
			"highlights": [
				"Generated  37,000,000 banner views",
				"100, 000 phone calls to congress",
				"500, 000 emails",
				"250, 000 signatures"
			],
			"summary": "Worked on many politically charged campaigns against mass surveillance. Not only technically challenging work but also a lot of networking and getting my hands dirty with politics.    Our biggest project was \"TheDayWeFightBack\"..",
			"website": "http://www.taskforce.is",
			"company": "Taskforce.is",
			"position": "Developer",
			"startDate": "2013-06-01"
		},
		{
			"highlights": [
				"The site and blog combined have managed to receive over 200,000 visitors in 2014."
			],
			"summary": "An international directory of civilian drone / UAV operators for hire. Services include aerial photography, aerial video, mapping, surveying, precision agriculture, real estate photography, remote inspections and infrared imaging. Our plan is to be the place to go when looking for UAV/Drone services. The website is built in Backbone.js and API is built with Node.js and Postgres. ",
			"website": "http://www.dronehire.org",
			"company": "Drone Hire",
			"position": "Co-Founder",
			"startDate": "2013-01-01"
		},
		{
			"highlights": [
				"Over two million unique visitors a year",
				"25,000+ ebook downloads",
				"280,000 Youtube views"
			],
			"summary": "I write tutorials and blog post regarding the popular Javascript framework Backbone.js. The tutorials cover a range of topics regarding front end development aimed at beginners, experts and anyone in between.",
			"website": "http://backbonetutorials.com",
			"company": "BackboneTutorials.com",
			"position": "Founder",
			"startDate": "2011-01-01"
		},
		{
			"summary": "Ephox is a worldwide company who is heavily involved with the development of TinyMce and enterprise editors. My primary role included building front-end widgets and applications. Worked on a major product using Backbone.js as a base. Heavily involved in UI/UX design and wire-framing. Also spend a lot of time designing API specifications and documentation.",
			"website": "http://ephox.com",
			"company": "Ephox",
			"position": "Front-end Developer",
			"endDate": "2012-06-01",
			"startDate": "2011-01-01"
		}
	]
}

},{}],2:[function(require,module,exports){
"use strict";
// import {FieldConfig} from './FieldConfig';
Object.defineProperty(exports, "__esModule", { value: true });
const FieldConfig = require('./FieldConfig').FieldConfig;
const IndeedCom_1 = require("./sites/IndeedCom");
const JSONResume_1 = require("./JSONResume");
const OnApplyDe_1 = require("./sites/OnApplyDe");
const BMWGroupDe_1 = require("./sites/BMWGroupDe");
const JobsNintendoDe_1 = require("./sites/JobsNintendoDe");
const DaimlerCom_1 = require("./sites/DaimlerCom");
const DocumentFields_1 = require("./DocumentFields");
// const isBrowser = this.window === this;
const isBrowser = typeof window == 'object' && window.toString() == "[object Window]";
class Apply {
    constructor(document) {
        this.fillerMap = {
            'onapply.de': OnApplyDe_1.OnApplyDe,
            'indeed.com': IndeedCom_1.IndeedCom,
            'bmwgroup.de': BMWGroupDe_1.BMWGroupDe,
            'jobs.nintendo.de': JobsNintendoDe_1.JobsNintendoDe,
            'daimler.com': DaimlerCom_1.DaimlerCom,
        };
        this.document = document;
        this.$ = this.document.querySelector.bind(this.document);
        this.$$ = selector => {
            // https://davidwalsh.name/nodelist-array
            const list = this.document.querySelectorAll(selector);
            return [].slice.call(list);
        };
        if (isBrowser) {
            chrome.runtime.onMessage.addListener(this.messageHandler.bind(this));
        }
        this.resume = new JSONResume_1.JSONResume(require('./../fixture/thomasdavis.json'));
        // console.log(this.resume);
    }
    checkForm() {
        const selectors = this.getSelectorsFromFrames();
        if (selectors) {
            const json = this.zip(selectors, [], '');
            console.log(JSON.stringify(json, null, 4));
        }
        else {
            console.log('no forms on this page');
        }
    }
    getSelectorsFromFrames() {
        let allSelectors = [];
        this.document.querySelectorAll('iframe').forEach(item => {
            let frameDocument = item.contentWindow.document;
            console.log(frameDocument.querySelectorAll('input'));
            let df = new DocumentFields_1.DocumentFields(frameDocument);
            allSelectors.push({
                iframe: item,
                selectors: df.getSelectors(),
            });
        });
        return allSelectors;
    }
    getSelectors() {
        const allSelectors = this.getSelectorsFromFrames();
        const merged = [];
        allSelectors.forEach((el) => {
            merged.concat(el.selectors);
        });
        return merged;
    }
    messageHandler(request, sender, sendResponse) {
        // console.log(sender.tab ?
        // 	"from a content script:" + sender.tab.url :
        // 	"from the extension");
        this.clickIcon(request);
        sendResponse({});
    }
    clickIcon(request) {
        console.log('request', request);
        const selectors = this.getSelectors();
        const values = selectors.map(selector => {
            const el = this.$(selector);
            return el.selectedIndex ? el.options[el.value].value : el.value;
        });
        const zip = this.zip(selectors, values);
        console.log(zip);
        const filler = this.getFiller(document.location.host);
        console.log(filler);
        if (filler) {
            filler.fill(document);
        }
        else {
            console.log("we don't know how to fill ", document.location.host);
        }
    }
    zip(selectors, values, defaultV = undefined) {
        const zip = {};
        selectors.forEach((key, idx) => zip[key] = idx in values ? values[idx] : defaultV);
        return zip;
    }
    getFiller(host) {
        let filler;
        const one = Object.keys(this.fillerMap).filter((domain) => {
            return host.endsWith(domain);
        });
        if (one.length) {
            const className = this.fillerMap[one[0]]; // onapply.de => OnApplyDe
            //filler = require('./sites/' + className);
            //filler = filler[className];
            //filler = new this[className]();
            // filler = Object.create(className);
            filler = new className(this.resume);
        }
        return filler;
    }
}
exports.Apply = Apply;

},{"./../fixture/thomasdavis.json":1,"./DocumentFields":3,"./FieldConfig":4,"./JSONResume":5,"./sites/BMWGroupDe":7,"./sites/DaimlerCom":9,"./sites/IndeedCom":10,"./sites/JobsNintendoDe":11,"./sites/OnApplyDe":12}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class DocumentFields {
    constructor(document) {
        this.document = document;
        this.$ = this.document.querySelector.bind(this.document);
        this.$$ = selector => {
            // https://davidwalsh.name/nodelist-array
            const list = this.document.querySelectorAll(selector);
            return [].slice.call(list);
        };
    }
    getSelectors() {
        const forms = this.$$('form');
        let form;
        if (forms.length == 1) {
            form = forms[0];
        }
        else if (forms.length = 0) {
            form = this.document;
        }
        else {
            form = this.findLargestForm(forms);
        }
        if (form) {
            let fields = form.querySelectorAll('input,select,button,textarea');
            fields = [].slice.call(fields);
            // console.log(fields);
            const config = this.extractForm(fields);
            // console.log(JSON.stringify(config, null, 4));
            const selectors = config.map((el) => {
                return el.selector;
            });
            return selectors;
        }
        return null;
    }
    findLargestForm(forms) {
        const mapLength = forms.map((el) => {
            return el.querySelectorAll('input,select,button,textarea').length;
        });
        const max = Math.max(...mapLength);
        const maxIndex = mapLength.indexOf(max);
        return forms[maxIndex];
    }
    extractForm(fields) {
        let collection = [];
        const allClasses = fields.map(el => {
            return el.className;
        });
        const classFrequency = this.getFrequency(allClasses);
        fields.forEach(field => {
            let labels = this.getLabels(field);
            const config = new FieldConfig({
                'selector': this.getSelector(field, labels, classFrequency),
                'tagName': field.tagName.toLowerCase(),
                'type': field.type,
                'class': field.className,
                'id': field.id,
                'labels': labels,
            });
            collection.push(config);
        });
        return collection;
    }
    getLabels(field) {
        return field.labels
            ? [].slice.call(field.labels).map((el) => {
                return el.innerText.trim();
            }) : null;
    }
    getSelector(field, labels, classFrequency) {
        let selector = field.tagName.toLowerCase();
        // avoid id with numbers
        if (field.id && !field.id.match(/[0-9]/)) {
            selector += '#' + field.id;
        }
        else if (field.name && !field.name.match(/[0-9]/)) {
            selector += '[name="' + field.name + '"]';
        }
        else if (field.className && classFrequency[field.className] == 1) {
            const classes = field.className.split(' ');
            selector += '.' + classes.join('.');
            // } else if (labels && labels.length) {
            // 	selector = 'label:contains("'+labels[0]+'") '+selector;
        }
        else if (field.name) {
            selector += '[name="' + field.name + '"]';
        }
        else if (field.id) {
            selector += '#' + field.id;
        }
        else if (field.type) {
            selector += '[type="' + field.type + '"]';
        }
        return selector;
    }
    getFrequency(array) {
        return array.reduce(this.countDuplicates, {});
    }
    countDuplicates(obj, num) {
        obj[num] = (++obj[num] || 1);
        return obj;
    }
}
exports.DocumentFields = DocumentFields;

},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class FieldConfig {
    constructor(props) {
        Object.assign(this, props);
    }
}
exports.FieldConfig = FieldConfig;

},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class JSONResume {
    constructor(props) {
        Object.assign(this, props);
    }
    findDeep(path) {
        let current = this;
        path.split('.').forEach((p) => { current = current[p]; });
        return current;
    }
}
exports.JSONResume = JSONResume;

},{}],6:[function(require,module,exports){
console.log('Apply 0.2');
const Apply = require('./Apply').Apply;
new Apply(document).checkForm();

},{"./Apply":2}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BasicFiller_1 = require("./BasicFiller");
/**
 * @see
 */
class BMWGroupDe extends BasicFiller_1.BasicFiller {
    constructor() {
        super(...arguments);
        this.map = {
            "select#anredeid": "basics.anrede",
            "input#vorname": "basics.firstName",
            "input#nachname": "basics.lastName",
            "input#benutzername": "basics.username",
            "input#passwort": "basics.password",
            "input#passwortwiederholung": "basics.password",
            "input#email": "basics.email",
            "input#emailwiederholung": "basics.email",
        };
    }
}
exports.BMWGroupDe = BMWGroupDe;

},{"./BasicFiller":8}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class BasicFiller {
    constructor(resume) {
        this.resume = resume;
    }
    fill(document) {
        Object.keys(this.map).forEach((selector) => {
            const path = this.map[selector];
            const value = this.resume.findDeep(path);
            console.log(selector, path, value);
            const el = document.querySelector(selector);
            if (el) {
                if (el.tagName.toUpperCase() == 'SELECT') {
                    this.fillSelect(el, value, Array.isArray(value) ? value : [value]);
                }
                else if (el.tagName.toUpperCase() == 'TEXTAREA') {
                    this.fillTextarea(el, value);
                }
                else if (el.type.toUpperCase() == 'CHECKBOX') {
                    this.fillCheckbox(el, value);
                }
                else if (el.type.toUpperCase() == 'RADIO') {
                    this.fillRadio(el, value);
                }
                else {
                    el.value = value;
                }
            }
        });
    }
    fillSelect(el, value, values) {
        const options = [].slice.call(el.options).map((el) => {
            return el.innerHTML.trim();
        });
        let index;
        if (values.length) {
            index = values.reduce((acc, el) => {
                if (acc > -1) {
                    return acc;
                }
                else {
                    return options.indexOf(el);
                }
            }, -1);
        }
        else {
            index = options.indexOf(value);
        }
        // console.log(options, value, index, options[index]);
        if (index >= 0) {
            el.selectedIndex = index;
        }
        return el;
    }
    fillTextarea(el, value) {
        el.innerHTML = value;
    }
    fillCheckbox(el, value) {
        el.checked = value;
    }
    fillRadio(el, value) {
        const name = el.name;
        let sameName = document.getElementsByName(name);
        sameName = [].slice.call(sameName);
        console.log(name, sameName, value);
        const aValue = Array.isArray(value) ? value : [value];
        sameName.forEach((el) => {
            if (-1 < aValue.indexOf(el.value.trim())) {
                el.checked = true;
            }
        });
    }
}
exports.BasicFiller = BasicFiller;

},{}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BasicFiller_1 = require("./BasicFiller");
/**
 * @see
 */
class DaimlerCom extends BasicFiller_1.BasicFiller {
    constructor() {
        super(...arguments);
        this.map = {
            'input#HRS_APPL_WRK_HRS_OPRNAME$13$': 'basics.username',
            'input#HRS_APPL_WRK_HRS_OPRPSWD$15$': 'basics.password',
            'input#HRS_APPL_WRK_HRS_CONFMPSWD': 'basics.password',
        };
    }
}
exports.DaimlerCom = DaimlerCom;

},{"./BasicFiller":8}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BasicFiller_1 = require("./BasicFiller");
/**
 * @see https://de.indeed.com/viewjob?jk=1f37eef6ca8b860f&q=php&tk=1birctct992sgddm&from=web
 * @problem with iframes from other domain apply.indeed.com
 */
class IndeedCom extends BasicFiller_1.BasicFiller {
    constructor() {
        super(...arguments);
        this.map = {
            'input#applicant.name': 'basics.name',
            'input#applicant.email': 'basics.email',
            'input#applicant.phoneNumber': 'basics.phone',
        };
    }
}
exports.IndeedCom = IndeedCom;

},{"./BasicFiller":8}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BasicFiller_1 = require("./BasicFiller");
/**
 * @see https://jobs.nintendo.de/main?fn=bm.ext.jobsform&refnr=2341288&land=DE
 */
class JobsNintendoDe extends BasicFiller_1.BasicFiller {
    constructor(resume) {
        super(resume);
        this.map = {
            "input[name=\"bem\"]": "coverLetter",
            "select[name=\"kontakt\"]": "basics.preferredContact",
            "input[name=\"geschl\"]": "basics.anrede",
            "select[name=\"titel\"]": "basics.title",
            "input[name=\"vname\"]": "basics.firstName",
            "input[name=\"name\"]": "basics.lastName",
            "input[name=\"ansch\"]": "basics.location.street",
            "input[name=\"anschplz\"]": "basics.location.zip",
            "input[name=\"anschort\"]": "basics.location.city",
            "select[name=\"anschland\"]": "basics.location.country",
            "input[name=\"telefon1\"]": "basics.phone",
            "input[name=\"telefon2\"]": "basics.phone2",
            "input[name=\"telefax\"]": "basics.fax",
            "input[name=\"email\"]": "basics.email",
            "select[name=\"schule\"]": "educationByType.school.studyType",
            "input[name=\"schule1\"]": "educationByType.school.studyType",
            "select[name=\"abschl\"]": "educationByType.school.degree",
            "input[name=\"abschl1\"]": "educationByType.school.degree",
            "textarea[name=\"zinfo\"]": "educationByType.school.institution",
            "input[name=\"ausb1\"]": "educationByType.apprenticeship1.studyType",
            "input[name=\"firma1\"]": "educationByType.apprenticeship1.institution",
            "input[name=\"fachricht1\"]": "educationByType.apprenticeship1.area",
            "input[name=\"anschort1\"]": "educationByType.apprenticeship1.location",
            "textarea[name=\"zinfo1\"]": "educationByType.apprenticeship1.comment",
            "input[name=\"ausb2\"]": "educationByType.apprenticeship2.studyType",
            "input[name=\"firma2\"]": "educationByType.apprenticeship2.institution",
            "input[name=\"fachricht2\"]": "educationByType.apprenticeship2.area",
            "input[name=\"anschort2\"]": "educationByType.apprenticeship2.location",
            "textarea[name=\"zinfo2\"]": "educationByType.apprenticeship2.comment",
        };
        let educationByType = new Map();
        this.resume.education.forEach((edu) => {
            let type = edu.type;
            educationByType[type] = edu;
        });
        console.log(educationByType);
        this.resume.educationByType = educationByType;
    }
}
exports.JobsNintendoDe = JobsNintendoDe;

},{"./BasicFiller":8}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BasicFiller_1 = require("./BasicFiller");
/**
 * @see https://onapply.onapply.de/bewerbung/2620/On-apply-GmbH-Web-Developer-%28m-f%29-Frankfurt-am-Main--Deutschland.html
 */
class OnApplyDe extends BasicFiller_1.BasicFiller {
    constructor() {
        super(...arguments);
        this.map = {
            'select#applicationform-title': 'basics.title',
            'input#applicationform-firstname': 'basics.firstName',
            'input#applicationform-lastname': 'basics.lastName',
            'input#applicationform-email': 'basics.email',
            'input#applicationform-phonenumber': 'basics.phone',
        };
    }
}
exports.OnApplyDe = OnApplyDe;

},{"./BasicFiller":8}]},{},[6]);
